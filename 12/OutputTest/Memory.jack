// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let freeList = 2048; // heapBase
        let freeList[0] = 14336; // freeList.length = heapLength = 16383 - 2048 + 1 = 14336
        let freeList[1] = null; // freeList.next = null

        return;

    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        let memory = 0;
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

        var Array segment;
        var int segmentLength;
        var Array block;

        /* search freeList using best-fit or first-fit heuristics
        to obtain a segment with segment.length < size */
        let segment = freeList;
        let segmentLength = segment[0];
        // first-fit
        while (segmentLength < (size + 3)) {
          let segment = segment[1];

          // if no such segment is found return failure
          if (segment = null) {
            do Sys.error(6); // Heap overflow
            return 0;
          }
          let segmentLength = segment[0];
        }


        // block = needed part of the found segment
        let block = segment + segmentLength - size;

        // update freeList to reflect the allocation
        let segment[0] = segmentLength - size - 1;

        // block[-1] = size + 1 remember block size for de-allocation
        let block[-1] = size + 1;

        // return block
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array segment;

      let segment = o - 1;
      let segment[0] = o[-1];

      // insert segment into the freeList
      let segment[1] = freeList[1];
      let freeList[1] = segment;

      // defrag
      do Memory.defrag();

      return;
    }

    function void defrag() {
      return;
    }
}
