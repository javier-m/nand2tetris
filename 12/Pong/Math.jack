// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
      // twoToThe[j] = j**2;
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = -1 - 32767;
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int absX;
      var int absY;
      var int sum;
      var int shiftedX;
      var int j;

      let absX = Math.abs(x);
      let absY = Math.abs(y);
      let shiftedX = absX;
      let j = 0;

      while (j<15) {
        if (Math.bit(absY, j) = 1) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }

      if (Math.areDifferentSigns(x, y)) {
        let sum = - sum;
      }

      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int absX;
      var int absY;
      var int q;

      let absX = Math.abs(x);
      let absY = Math.abs(y);

      if (absY > absX) {
        return 0;
      }

      let q = Math.divide(absX, 2*absY);
      if ((absX - (2*q*absY)) < absY) {
        if (Math.areDifferentSigns(x, y)) {
          return -(2*q);
        }
        return 2*q;
      }
      else {
        if (Math.areDifferentSigns(x, y)) {
          return -((2*q) + 1);
        }
        return (2*q) + 1;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int sqrtX;
      var int j;
      var int condition;

      let sqrtX = 0;
      let j = 7;
      while (~(j < 0)) {
        let condition = sqrtX + twoToThe[j];
        let condition = condition * condition;
        if ((~(condition > x)) & (condition > 0)) {
          let sqrtX = sqrtX + twoToThe[j];
        }
        let j = j-1;
      }

      return sqrtX;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }

    function int bit(int x, int j) {
      if (x | (~ twoToThe[j]) = -1) {
        return 1;
      }
      else {
        return 0;
      }
    }

    function boolean areDifferentSigns(int x, int y) {
      return (((x<0)&(y>0)) | ((x>0)&(y<0)));
    }
}
