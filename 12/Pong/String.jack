// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array arrayChar;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (~(maxLength > 0)) {
        let arrayChar = null;
        let length = 0;
        return this;
      }
      let arrayChar = Array.new(maxLength);
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return arrayChar[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let arrayChar[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let arrayChar[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int value;
      var int j;
      var boolean isNegative;

      let value = 0;
      let j = 0;
      let isNegative = (arrayChar[0] = 45);
      if (isNegative) {
        let j = j+1;
      }
      while ((j < length) & (arrayChar[j] > 47) & (arrayChar[j] < 58)) {
        let value = (value * 10) + (arrayChar[j] - 48);
        let j = j + 1;
      }
      if (isNegative) {
        let value = - value;
      }
      return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int absVal;

      let length = 0;
      let absVal = Math.abs(val);

      if (val < 0) {
        do appendChar(45); // '-'
      }

      do intToString(absVal);

      return;
    }

    method void intToString(int absVal) {
      var int lastDigits;

      if (absVal < 10) {
        do appendChar(absVal + 48);
        return;
      }
      else {
        let lastDigits = absVal - ((absVal/10) * 10);
        do intToString(absVal/10);
        do intToString(lastDigits);
      }
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
