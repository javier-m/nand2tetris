function Math.init 0
push constant 16
call Array.new 1
pop static 0
push static 0
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 15
add
push constant 1
neg
push constant 32767
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto Math.abs.if_1.L1
push argument 0
neg
return
goto Math.abs.if_1.L2
label Math.abs.if_1.L1
label Math.abs.if_1.L2
push argument 0
return
function Math.multiply 5
push argument 0
call Math.abs 1
pop local 0
push argument 1
call Math.abs 1
pop local 1
push local 0
pop local 3
push constant 0
pop local 4
label Math.multiply.while_1.L1
push local 4
push constant 15
lt
not
if-goto Math.multiply.while_1.L2
push local 1
push local 4
call Math.bit 2
push constant 1
eq
not
if-goto Math.multiply.while_1.if_1.L1
push local 2
push local 3
add
pop local 2
goto Math.multiply.while_1.if_1.L2
label Math.multiply.while_1.if_1.L1
label Math.multiply.while_1.if_1.L2
push local 3
push local 3
add
pop local 3
push local 4
push constant 1
add
pop local 4
goto Math.multiply.while_1.L1
label Math.multiply.while_1.L2
push argument 0
push argument 1
call Math.areDifferentSigns 2
not
if-goto Math.multiply.if_2.L1
push local 2
neg
pop local 2
goto Math.multiply.if_2.L2
label Math.multiply.if_2.L1
label Math.multiply.if_2.L2
push local 2
return
function Math.divide 3
push argument 0
call Math.abs 1
pop local 0
push argument 1
call Math.abs 1
pop local 1
push local 1
push local 0
gt
not
if-goto Math.divide.if_1.L1
push constant 0
return
goto Math.divide.if_1.L2
label Math.divide.if_1.L1
label Math.divide.if_1.L2
push local 0
push constant 2
push local 1
call Math.multiply 2
call Math.divide 2
pop local 2
push local 0
push constant 2
push local 2
call Math.multiply 2
push local 1
call Math.multiply 2
sub
push local 1
lt
not
if-goto Math.divide.if_2.L1
push argument 0
push argument 1
call Math.areDifferentSigns 2
not
if-goto Math.divide.if_2.if_1.L1
push constant 2
push local 2
call Math.multiply 2
neg
return
goto Math.divide.if_2.if_1.L2
label Math.divide.if_2.if_1.L1
label Math.divide.if_2.if_1.L2
push constant 2
push local 2
call Math.multiply 2
return
goto Math.divide.if_2.L2
label Math.divide.if_2.L1
push argument 0
push argument 1
call Math.areDifferentSigns 2
not
if-goto Math.divide.if_2.if_2.L1
push constant 2
push local 2
call Math.multiply 2
push constant 1
add
neg
return
goto Math.divide.if_2.if_2.L2
label Math.divide.if_2.if_2.L1
label Math.divide.if_2.if_2.L2
push constant 2
push local 2
call Math.multiply 2
push constant 1
add
return
label Math.divide.if_2.L2
function Math.sqrt 3
push constant 0
pop local 0
push constant 7
pop local 1
label Math.sqrt.while_1.L1
push local 1
push constant 0
lt
not
not
if-goto Math.sqrt.while_1.L2
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 2
push local 2
push argument 0
gt
not
push local 2
push constant 0
gt
and
not
if-goto Math.sqrt.while_1.if_1.L1
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 0
goto Math.sqrt.while_1.if_1.L2
label Math.sqrt.while_1.if_1.L1
label Math.sqrt.while_1.if_1.L2
push local 1
push constant 1
sub
pop local 1
goto Math.sqrt.while_1.L1
label Math.sqrt.while_1.L2
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto Math.max.if_1.L1
push argument 0
return
goto Math.max.if_1.L2
label Math.max.if_1.L1
label Math.max.if_1.L2
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto Math.min.if_1.L1
push argument 0
return
goto Math.min.if_1.L2
label Math.min.if_1.L1
label Math.min.if_1.L2
push argument 1
return
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
not
or
push constant 1
neg
eq
not
if-goto Math.bit.if_1.L1
push constant 1
return
goto Math.bit.if_1.L2
label Math.bit.if_1.L1
push constant 0
return
label Math.bit.if_1.L2
function Math.areDifferentSigns 0
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
or
return
